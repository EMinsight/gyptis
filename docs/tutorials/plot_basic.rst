
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/plot_basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_plot_basic.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_plot_basic.py:


Tutorial: a scattering simulation in 2D
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 18-19

We first need to import the Python packages

.. GENERATED FROM PYTHON SOURCE LINES 19-27

.. code-block:: python3


    import matplotlib.pyplot as plt
    import numpy as np
    import gyptis as gy

    plt.ion()
    plt.close("all")








.. GENERATED FROM PYTHON SOURCE LINES 28-33

Define the wavelength of operation. This can be choosen arbitrarily, but
it is best for numerical stability not to use too big/small numbers
(e.g. if we work in optics, it is better to assume the
units are in microns amd use ``wavelength = 0.8`` rather than considering
meters and ``wavelength = 800e-9``).

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: python3


    wavelength = 0.8









.. GENERATED FROM PYTHON SOURCE LINES 38-43

We now define the geometry using the class :class:`~gyptis.BoxPML`.
This is a rectangular box in 2D (with the argument `dim=2`) centered at the
origin by default and surrounded by Cartesian PErfectly Matched Layers.
The important arguments are its size `box_size` and  the witdh of the
PMLs along :math:`x` and :math:`y`

.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: python3



    geom = gy.BoxPML(
        dim=2,
        box_size=(4 * wavelength, 4 * wavelength),
        pml_width=(wavelength, wavelength),
    )








.. GENERATED FROM PYTHON SOURCE LINES 52-55

We can now build and mesh the geometry. The method
:meth:`~gyptis.BoxPML.build` takes an ``interactive`` boolean argument
to open and wisualize the geometry in ``gmsh`` (usefull for debugging).

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: python3


    geom.build(finalize=False)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none



    {'mesh': <dolfin.cpp.mesh.Mesh object at 0x7f8a632b54f0>, 'markers': {'triangle': <dolfin.cpp.mesh.MeshFunctionSizet object at 0x7f8a633bc470>}}



.. GENERATED FROM PYTHON SOURCE LINES 59-60

Let's plot the geometry and mesh.

.. GENERATED FROM PYTHON SOURCE LINES 60-69

.. code-block:: python3


    fig, ax = plt.subplots(figsize=(3, 3))
    geom.plot_subdomains(ax=ax)
    geom.plot_mesh(ax=ax, color="red")
    plt.axis("equal")
    plt.xlabel("$x$ (μm)")
    plt.ylabel("$y$ (μm)")
    plt.tight_layout()




.. image-sg:: /tutorials/images/sphx_glr_plot_basic_001.png
   :alt: plot basic
   :srcset: /tutorials/images/sphx_glr_plot_basic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. attention::
      A geometry object cannot be modified after the method
      :meth:`~gyptis.BoxPML.build` has been called. We need to create a new object,
      define the geometry and set mesh parameters before building.

.. GENERATED FROM PYTHON SOURCE LINES 78-79

Now we add a circular rod.

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: python3


    scatt = geom.add_circle(0, 0, 0, wavelength / 2)








.. GENERATED FROM PYTHON SOURCE LINES 83-85

We use the boolean operation :meth:`~gyptis.BoxPML.fragment` to substract 
the rod from the box and get the remaining entities:

.. GENERATED FROM PYTHON SOURCE LINES 85-89

.. code-block:: python3


    scatt, box = geom.fragment(scatt, geom.box)









.. GENERATED FROM PYTHON SOURCE LINES 90-91

Add physical domains:

.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: python3


    geom.add_physical(box, "box")
    geom.add_physical(scatt, "rod")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    6



.. GENERATED FROM PYTHON SOURCE LINES 96-97

And set the mesh sizes:

.. GENERATED FROM PYTHON SOURCE LINES 97-102

.. code-block:: python3


    geom.set_pml_mesh_size(wavelength / 5)
    geom.set_size("box", wavelength / 6)
    geom.set_size("rod", wavelength / 10)








.. GENERATED FROM PYTHON SOURCE LINES 103-104

Now we can build it:

.. GENERATED FROM PYTHON SOURCE LINES 104-107

.. code-block:: python3


    geom.build()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none



    {'mesh': <dolfin.cpp.mesh.Mesh object at 0x7f8a62b71130>, 'markers': {'triangle': <dolfin.cpp.mesh.MeshFunctionSizet object at 0x7f8a632e28b0>}}



.. GENERATED FROM PYTHON SOURCE LINES 108-109

Visualize the mesh:

.. GENERATED FROM PYTHON SOURCE LINES 109-118

.. code-block:: python3


    fig, ax = plt.subplots(figsize=(3, 3))
    geom.plot_subdomains(ax=ax)
    geom.plot_mesh(ax=ax, color="red")
    plt.axis("equal")
    plt.xlabel("$x$ (μm)")
    plt.ylabel("$y$ (μm)")
    plt.tight_layout()




.. image-sg:: /tutorials/images/sphx_glr_plot_basic_002.png
   :alt: plot basic
   :srcset: /tutorials/images/sphx_glr_plot_basic_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 119-120

Visualize the subdomains:

.. GENERATED FROM PYTHON SOURCE LINES 120-152

.. code-block:: python3



    fig, ax = plt.subplots(figsize=(3, 2.3))
    out = geom.plot_subdomains(markers=True,ax=ax)
    plt.axis("scaled")
    plt.xlabel("$x$ (μm)")
    plt.ylabel("$y$ (μm)")
    plt.tight_layout()





    # pw = gy.PlaneWave(wavelength=wl, angle=0, dim=2, domain=geom.mesh, degree=2)
    # epsilon = dict(box=1, scatt=3)
    # mu = dict(box=1, scatt=1)
    #
    # s = gy.Scattering(
    #     geom,
    #     epsilon,
    #     mu,
    #     pw,
    #     degree=2,
    #     polarization="TE",
    # )
    # s.solve()
    # s.plot_field()
    # # geom.plot_mesh(lw=0.1)
    # geom_lines = geom.plot_subdomains()
    # plt.xlabel(r"$x$ (nm)")
    # plt.ylabel(r"$y$ (nm)")
    # plt.tight_layout()



.. image-sg:: /tutorials/images/sphx_glr_plot_basic_003.png
   :alt: plot basic
   :srcset: /tutorials/images/sphx_glr_plot_basic_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.076 seconds)

**Estimated memory usage:**  64 MB


.. _sphx_glr_download_tutorials_plot_basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/gyptis/gyptis.gitlab.io/doc?filepath=notebooks/tutorials/plot_basic.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_basic.py <plot_basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_basic.ipynb <plot_basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
